import Airpeak
import warnings
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib.dates as md

warnings.filterwarnings("ignore")

df = pd.read_csv("../sample_classroom_CO2_data.csv")
df["Time"] = pd.to_datetime(df["Time"])

ax = sns.scatterplot(data=df, x="Time", y="CO2_Concentration_ppm", s=10)
myFmt = md.DateFormatter("%H:%M")

df_or = Airpeak.outlier_removal(df, "CO2_Concentration_ppm", 10)
print(df_or)

ax = sns.scatterplot(data=df_or, x="Time", y="CO2_Concentration_ppm", s=10)
myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)

plt.show()

df_or = Airpeak.outlier_removal(df, "CO2_Concentration_ppm", 10)
print(df_or)

ax = sns.scatterplot(data=df_or, x="Time", y="CO2_Concentration_ppm", s=10)
myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)
plt.show()

df_sm = Airpeak.smoothing(df_or, "CO2_Concentration_ppm", 5, 2)
print(df_sm)

ax = sns.scatterplot(data=df_sm, x="Time", y="CO2_Concentration_ppm", s=10)
myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)
plt.show()

df_bd = Airpeak.baseline_detection(
    df_sm, "CO2_Concentration_ppm", base_lambda=1e7, base_p=0.0001
)
print(df_bd)

ax = sns.scatterplot(data=df_bd, x="Time", y="CO2_Concentration_ppm", s=10)
sns.lineplot(data=df_bd, x="Time", y="baseline", ax=ax, color="gray")
myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)
plt.show()

df_fg = Airpeak.feature_generation(
    df_bd, "CO2_Concentration_ppm", "Time", diff_ma_window=5, diff_rhl_window=5
)

# I am using dropping NA as a lazy way to handle NAs generated by gradient calculation and log function
df_fg = df_fg.dropna(
    subset=[
        "diff",
        "diff_ma",
        "diff_gd",
        "diff_gd_ln",
        "diff_gd_sign",
        "diff_gd_abs",
        "diff_rhl",
    ]
)

print(df_fg)


df_ele = Airpeak.k_means_ele(df_fg)

ax = sns.scatterplot(
    data=df_ele, x="Time", y="CO2_Concentration_ppm", hue="elevated", s=10
)
sns.lineplot(data=df_bd, x="Time", y="baseline", ax=ax, color="gray")

myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)
plt.show()

df_diff = Airpeak.k_means_diff(df_ele, "Time")

plt.figure(figsize=(12, 4))
palette = sns.color_palette("tab10")[0:3]
ax = sns.scatterplot(
    data=df_diff,
    x="Time",
    y="CO2_Concentration_ppm",
    hue="status_label",
    s=10,
    palette=palette,
)
sns.lineplot(data=df_bd, x="Time", y="baseline", ax=ax, color="gray")

myFmt = md.DateFormatter("%H:%M")
ax.xaxis.set_major_formatter(myFmt)
plt.show()

df_decay = Airpeak.dbscan(df_diff, "Time", eps=0.05, ms=5)


palette = (
    [(0.72, 0.89, 0.91)]
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
)

date_list = df_decay["Date"].unique()
for date in date_list:
    plt.figure(figsize=(12, 4))
    df_decay_singleday = df_decay.loc[df_decay["Date"] == date]
    palette_num = len(df_decay_singleday["decay_group"].unique())
    ax = sns.scatterplot(
        data=df_decay_singleday,
        x="Time",
        y="CO2_Concentration_ppm",
        hue="decay_group",
        s=10,
        palette=palette[0:palette_num],
    )
    myFmt = md.DateFormatter("%H:%M")
    ax.xaxis.set_major_formatter(myFmt)

plt.show()


date_list = df_decay["Date"].unique()
decay_rate_result = pd.DataFrame()
for date in date_list:
    df_working = df_decay.loc[df_decay["Date"] == date]
    decay_rate = Airpeak.decay_regress(df_working, "CO2_Concentration_ppm", "Time")
    decay_rate_result = pd.concat([decay_rate_result, decay_rate])

print(decay_rate_result)


# An example for visualization
f, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6), sharex=True)

palette = (
    [(0.72, 0.89, 0.91)]
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
)

date = date_list[0]
df_decay_singleday = df_decay.loc[df_decay["Date"] == date]

decay_rate_result["Date"] = decay_rate_result["time"].dt.date
df_result_singleday = decay_rate_result.loc[decay_rate_result["Date"] == date]

palette_num = len(df_decay_singleday["decay_group"].unique())
sns.scatterplot(
    data=df_decay_singleday,
    x="Time",
    y="CO2_Concentration_ppm",
    hue="decay_group",
    s=10,
    ax=ax1,
    palette=palette[0:palette_num],
)
myFmt = md.DateFormatter("%H:%M")
ax1.xaxis.set_major_formatter(myFmt)

sns.scatterplot(data=df_result_singleday, x="time", y="decay_rate", ax=ax2)

plt.show()

decay_rate_result_selected = decay_rate_result.loc[
    (decay_rate_result["num_of_point"] >= 10) & (decay_rate_result["r2"] >= 0.9)
]
print(decay_rate_result_selected)

f, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 6), sharex=True)

palette = (
    [(0.72, 0.89, 0.91)]
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
    + list(sns.color_palette("Set1"))
    + list(sns.color_palette("Set2"))
)

date = date_list[0]
df_decay_singleday = df_decay.loc[df_decay["Date"] == date]

decay_rate_result_selected["Date"] = decay_rate_result_selected["time"].dt.date
df_result_selected_singleday = decay_rate_result_selected.loc[
    decay_rate_result_selected["Date"] == date
]

palette_num = len(df_decay_singleday["decay_group"].unique())
sns.scatterplot(
    data=df_decay_singleday,
    x="Time",
    y="CO2_Concentration_ppm",
    hue="decay_group",
    s=10,
    ax=ax1,
    palette=palette[0:palette_num],
)
myFmt = md.DateFormatter("%H:%M")
ax1.xaxis.set_major_formatter(myFmt)

sns.scatterplot(data=df_result_selected_singleday, x="time", y="decay_rate", ax=ax2)
plt.show()
